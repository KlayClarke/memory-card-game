{"ast":null,"code":"var _jsxFileName = \"/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Shuffle = () => {\n  _s();\n\n  useEffect(() => {\n    function shuffle(array) {\n      let currentIndex = array.length,\n          randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n      }\n\n      return array;\n    }\n  });\n};\n\n_s(Shuffle, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Shuffle;\n\nconst Cards = () => {\n  _s2();\n\n  const [cards, setCards] = useState(shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n\n  function handleCardClick(e) {\n    setCards(shuffle(cards));\n    console.log(e.target.id);\n    console.log(cards);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"cards-grid\",\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-item\",\n      id: card,\n      onClick: handleCardClick,\n      children: card\n    }, card, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Cards, \"EA4DQ97LXNmZs+oC4wOIbVXXEYQ=\");\n\n_c2 = Cards;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(Cards, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = App;\nexport default App; // PLAN\n// must make a game that has 12 cards, user clicks on a card and the cards shuffl (user current score increases)\n// if user clicks on same card twice, score resets --> if previous score was highest score of session, high score is prev\n// MUST HAVE COMPONENTS\n// scoreboard that shows current score and highest session score\n// cards on screen that have discernible text, images - able to click\n// display said cards in random order at when component mounts\n//\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Shuffle\");\n$RefreshReg$(_c2, \"Cards\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js"],"names":["useState","useEffect","Shuffle","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","Cards","cards","setCards","handleCardClick","e","console","log","target","id","map","card","App"],"mappings":";;;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpBD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASE,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,UACEC,WADF;;AAGA,aAAOF,YAAY,KAAK,CAAxB,EAA2B;AACzBE,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,QAAAA,YAAY;AAEZ,SAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EAE1CH,KAAK,CAACC,YAAD,CAFqC,CAA5C;AAID;;AACD,aAAOD,KAAP;AACD;AACF,GAhBQ,CAAT;AAiBD,CAlBD;;GAAMF,O;;KAAAA,O;;AAoBN,MAAMS,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAChCG,OAAO,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,CAAD,CADyB,CAAlC;;AAIA,WAASW,eAAT,CAAyBC,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACV,OAAO,CAACS,KAAD,CAAR,CAAR;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,EAArB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD;;AAED,sBACE;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,cACGA,KAAK,CAACQ,GAAN,CAAWC,IAAD,iBACT;AACE,MAAA,SAAS,EAAC,WADZ;AAGE,MAAA,EAAE,EAAEA,IAHN;AAIE,MAAA,OAAO,EAAEP,eAJX;AAAA,gBAMGO;AANH,OAEOA,IAFP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAzBD;;IAAMV,K;;MAAAA,K;;AA2BN,MAAMW,GAAG,GAAG,MAAM;AAChB,sBACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA,2BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;MAAMA,G;AAQN,eAAeA,GAAf,C,CAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Shuffle = () => {\n  useEffect(() => {\n    function shuffle(array) {\n      let currentIndex = array.length,\n        randomIndex;\n\n      while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [array[currentIndex], array[randomIndex]] = [\n          array[randomIndex],\n          array[currentIndex],\n        ];\n      }\n      return array;\n    }\n  });\n};\n\nconst Cards = () => {\n  const [cards, setCards] = useState(\n    shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  );\n\n  function handleCardClick(e) {\n    setCards(shuffle(cards));\n    console.log(e.target.id);\n    console.log(cards);\n  }\n\n  return (\n    <div id=\"cards-grid\">\n      {cards.map((card) => (\n        <div\n          className=\"card-item\"\n          key={card}\n          id={card}\n          onClick={handleCardClick}\n        >\n          {card}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div id=\"main-container\">\n      <Cards />\n    </div>\n  );\n};\n\nexport default App;\n\n// PLAN\n\n// must make a game that has 12 cards, user clicks on a card and the cards shuffl (user current score increases)\n// if user clicks on same card twice, score resets --> if previous score was highest score of session, high score is prev\n\n// MUST HAVE COMPONENTS\n// scoreboard that shows current score and highest session score\n// cards on screen that have discernible text, images - able to click\n// display said cards in random order at when component mounts\n//\n"]},"metadata":{},"sourceType":"module"}