{"ast":null,"code":"var _jsxFileName = \"/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cards = props => {\n  _s();\n\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [cards, setCards] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  function currentScoreIncrement() {\n    setCurrentScore(currentScore + 1);\n  }\n\n  function handleCardClick(e) {\n    currentScoreIncrement();\n    console.log(\"card click handling\");\n  }\n\n  useEffect(() => {\n    setCards(shuffle(cards));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score\",\n      children: [\"Current score: \", currentScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"cards-grid\",\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-item\",\n          id: card,\n          onClick: handleCardClick,\n          children: card\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cards, \"E5nZG5TS4Eoumy2mrx17u/zhlQU=\");\n\n_c = Cards;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(Cards, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = App;\nexport default App; // PLAN\n// must make a game that has 12 cards, user clicks on a card and the cards shuffl (user current score increases)\n// if user clicks on same card twice, score resets --> if previous score was highest score of session, high score is prev\n// MUST HAVE COMPONENTS\n// scoreboard that shows current score and highest session score\n// cards on screen that have discernible text, images - able to click\n// display said cards in random order at when component mounts\n//\n// if user hits same card twice in session, reset currentScore - if high score, update high score\n// if user score is cards length, user wins\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cards\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js"],"names":["useState","useEffect","Cards","props","currentScore","setCurrentScore","highScore","setHighScore","cards","setCards","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","currentScoreIncrement","handleCardClick","e","console","log","map","card","App"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CACjC,CADiC,EAC9B,CAD8B,EAC3B,CAD2B,EACxB,CADwB,EACrB,CADqB,EAClB,CADkB,EACf,CADe,EACZ,CADY,EACT,CADS,EACN,EADM,EACF,EADE,EACE,EADF,EACM,EADN,EACU,EADV,EACc,EADd,EACkB,EADlB,CAAD,CAAlC;;AAIA,WAASU,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QACEC,WADF;;AAGA,WAAOF,YAAY,KAAK,CAAxB,EAA2B;AACzBE,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,MAAAA,YAAY;AAEZ,OAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EAE1CH,KAAK,CAACC,YAAD,CAFqC,CAA5C;AAID;;AACD,WAAOD,KAAP;AACD;;AAID,WAASO,qBAAT,GAAiC;AAC/Bb,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACD;;AAED,WAASe,eAAT,CAAyBC,CAAzB,EAA4B;AAC1BF,IAAAA,qBAAqB;AACrBG,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AAEDrB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACC,OAAO,CAACF,KAAD,CAAR,CAAR;AACD,GAFQ,CAAT;AAIA,sBACE;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA,oCAAgCJ,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA,6BACE;AAAK,QAAA,EAAE,EAAC,YAAR;AAAA,kBACGI,KAAK,CAACe,GAAN,CAAWC,IAAD,iBACT;AACE,UAAA,SAAS,EAAC,WADZ;AAGE,UAAA,EAAE,EAAEA,IAHN;AAIE,UAAA,OAAO,EAAEL,eAJX;AAAA,oBAMGK;AANH,WAEOA,IAFP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAzDD;;GAAMtB,K;;KAAAA,K;;AA2DN,MAAMuB,GAAG,GAAG,MAAM;AAChB,sBACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA,2BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;MAAMA,G;AAQN,eAAeA,GAAf,C,CAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Cards = (props) => {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [cards, setCards] = useState([\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n  ]);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n    return array;\n  }\n\n\n  \n  function currentScoreIncrement() {\n    setCurrentScore(currentScore + 1);\n  }\n\n  function handleCardClick(e) {\n    currentScoreIncrement();\n    console.log(\"card click handling\");\n  }\n\n  useEffect(() => {\n    setCards(shuffle(cards));\n  });\n\n  return (\n    <div>\n      <div id=\"score\">Current score: {currentScore}</div>\n      <div id=\"grid-container\">\n        <div id=\"cards-grid\">\n          {cards.map((card) => (\n            <div\n              className=\"card-item\"\n              key={card}\n              id={card}\n              onClick={handleCardClick}\n            >\n              {card}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div id=\"main-container\">\n      <Cards />\n    </div>\n  );\n};\n\nexport default App;\n\n// PLAN\n\n// must make a game that has 12 cards, user clicks on a card and the cards shuffl (user current score increases)\n// if user clicks on same card twice, score resets --> if previous score was highest score of session, high score is prev\n\n// MUST HAVE COMPONENTS\n// scoreboard that shows current score and highest session score\n// cards on screen that have discernible text, images - able to click\n// display said cards in random order at when component mounts\n//\n\n// if user hits same card twice in session, reset currentScore - if high score, update high score\n// if user score is cards length, user wins\n"]},"metadata":{},"sourceType":"module"}