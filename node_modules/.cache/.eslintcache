[{"/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/index.js":"1","/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js":"2"},{"size":197,"mtime":1645597815028,"results":"3","hashOfConfig":"4"},{"size":2480,"mtime":1645631086675,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k0hz8y",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/index.js",[],[],"/Users/klayclarke/Desktop/Development/javascript/portfolio/memory-card-game/src/App.js",["13"],[],"import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nconst Cards = (props) => {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [cards, setCards] = useState([\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n  ]);\n  const [clickedCards, setClickedCards] = useState([]);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n    return array;\n  }\n\n  function checkForHighScore() {\n    if (currentScore > highScore) {\n      setHighScore(currentScore);\n    }\n  }\n\n  function currentScoreIncrement(e) {\n    if (!clickedCards.includes(e.target.id)) {\n      setCurrentScore(currentScore + 1);\n      setClickedCards([...clickedCards, e.target.id]);\n    } else {\n      checkForHighScore();\n      setCurrentScore(0);\n      setClickedCards([]);\n    }\n  }\n\n  function handleCardClick(e) {\n    currentScoreIncrement(e);\n  }\n\n  useEffect(() => {\n    setCards(shuffle(cards));\n    console.log(clickedCards);\n  });\n\n  return (\n    <div>\n      <div id=\"score\">\n        Current Score: {currentScore} <br />\n        High Score: {highScore}\n      </div>\n      <div id=\"grid-container\">\n        <div id=\"cards-grid\">\n          {cards.map((card) => (\n            <div\n              className=\"card-item\"\n              key={card}\n              id={card}\n              onClick={handleCardClick}\n            >\n              {card}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div id=\"main-container\">\n      <Cards />\n    </div>\n  );\n};\n\nexport default App;\n\n// PLAN\n\n// must make a game that has 12 cards, user clicks on a card and the cards shuffl (user current score increases)\n// if user clicks on same card twice, score resets --> if previous score was highest score of session, high score is prev\n\n// MUST HAVE COMPONENTS\n// scoreboard that shows current score and highest session score\n// cards on screen that have discernible text, images - able to click\n// display said cards in random order at when component mounts\n//\n\n// if user hits same card twice in session, reset currentScore - if high score, update high score\n// if user score is cards length, user wins\n",{"ruleId":"14","severity":1,"message":"15","line":49,"column":3,"nodeType":"16","endLine":49,"endColumn":12,"suggestions":"17"},"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setCards'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cards, clickedCards] as a second argument to the useEffect Hook.","Identifier",["18"],{"desc":"19","fix":"20"},"Add dependencies array: [cards, clickedCards]",{"range":"21","text":"22"},[1258,1258],", [cards, clickedCards]"]